clear
clc
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Thu May 07 15:12:02 CEST 2015
%
% This script assumes these variables are defined:
%
%   in - input data.
%   tg - target data.
M=csvread('gagliano\day0.csv',1,0);
targets = M(:,14)';

for i=2:13,
    combos=combntns(2:13,i-1);
    for j=1:size(combos,1),
        inputs = M(:,combos(j,:))';
        
        % Create a Fitting Network
        hiddenLayerSize = 10;
        net = fitnet(hiddenLayerSize);

        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 70/100;
        net.divideParam.valRatio = 15/100;
        net.divideParam.testRatio = 15/100;

        % Train the Network
        [net,tr] = train(net,inputs,targets);

        % Test the Network
        outputs = net(inputs);
        errors = gsubtract(targets,outputs);
        performance = perform(net,targets,outputs);
        dlmwrite('gagliano\Part_I_11\day1_min_mse.csv',[performance combos(j,:)],'-append');
        % View the Network
        %view(net)

        % Plots
        % Uncomment these lines to enable various plots.
        %figure, plotperform(tr)
        %figure, plottrainstate(tr)
        %figure, plotfit(net,inputs,targets)
        %figure, plotregression(targets,outputs)
        %figure, ploterrhist(errors)
    end
end
