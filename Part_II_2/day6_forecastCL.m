clear;
clc;
M=csvread('gagliano\day0.csv',366,0);
T = M(:,14)';
X = M(:,[3 4 5 7 9 11])';

% Solve an Autoregression Problem with External Input with a NARX Neural Network
% Script generated by NTSTOOL
% Created Fri Jul 03 22:23:44 CEST 2015
%
% This script assumes these variables are defined:
%
%   X - input time series.
%   T - feedback time series.

inputSeries = tonndata(X,true,false);
targetSeries = tonndata(T,true,false);

% Create a Nonlinear Autoregressive Network with External Input
inputDelays = 1:20;
feedbackDelays = 1:20;
hiddenLayerSize = 15;
net = narxnet(inputDelays,feedbackDelays,hiddenLayerSize);

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer states.
% Using PREPARETS allows you to keep your original time series data unchanged, while
% easily customizing it for networks with differing numbers of delays, with
% open loop or closed loop feedback modes.
[inputs,inputStates,layerStates,targets] = preparets(net,inputSeries,{},targetSeries);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,inputs,targets,inputStates,layerStates);

% Test the Network
outputs = net(inputs,inputStates,layerStates);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotregression(targets,outputs)
%figure, plotresponse(targets,outputs)
%figure, ploterrcorr(errors)
%figure, plotinerrcorr(inputs,errors)

% Closed Loop Network
% Use this network to do multi-step prediction.
% The function CLOSELOOP replaces the feedback input with a direct
% connection from the outout layer.
netc = closeloop(net);
netc.name = [net.name ' - Closed Loop'];
%view(netc)
[xc,xic,aic,tc] = preparets(netc,inputSeries,{},targetSeries);
yc = netc(xc,xic,aic);
closedLoopPerformance = perform(netc,tc,yc);


% Early Prediction Network
% For some applications it helps to get the prediction a timestep early.
% The original network returns predicted y(t+1) at the same time it is given y(t+1).
% For some applications such as decision making, it would help to have predicted
% y(t+1) once y(t) is available, but before the actual y(t+1) occurs.
% The network can be made to return its output a timestep early by removing one delay
% so that its minimal tap delay is now 0 instead of 1.  The new network returns the
% same outputs as the original network, but outputs are shifted left one timestep.


earlyPredictPerformance = zeros(1,12);

for i=[1 2 7 10 15],
    for j=1:30:331,
        inputSeries = tonndata(X(:,j+i:j+i+20),true,false);
        targetSeries = tonndata(T(j+i:j+i+20),true,false);
        [xs,xis,ais,ts] = preparets(netc,inputSeries,{},targetSeries);
        ys = netc(xs,xis,ais);
        Ts=cell2mat(ts);
        Ys=cell2mat(ys);
        earlyPredictPerformance(1+floor(j/30)) = perform(netc,Ts,Ys);
    end
    dlmwrite('gagliano\Part_II_2\day6_forecastCL_MSE.csv',earlyPredictPerformance,'-append');
end
